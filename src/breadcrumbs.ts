import * as YAML from 'yaml';
import * as vscode from 'vscode';

import { findBreadcrumbs } from './lib/breadcrumbs';
import { getWorkspaceRootUri } from './vscode-helpers';

export async function validate(document: vscode.TextDocument, outputChannel: vscode.OutputChannel) {
    outputChannel.appendLine('Analyzing the breadcrumbs in the markdown file');
    await validateBreadcrumbs(document, outputChannel);
    outputChannel.appendLine('');
}

async function validateBreadcrumbs(document: vscode.TextDocument, outputChannel: vscode.OutputChannel) {
    const breadcrumbs = findBreadcrumbs(document.getText());

    outputChannel.show(true);
    if (!breadcrumbs) {
        outputChannel.appendLine(`No breadcrumbs found`);

        validateIfBreadcrumbsCanBeAutoGenerated(document, outputChannel);

        return;
    } 

    breadcrumbs?.forEach(async breadcrumb => {
        await validateBreadcrumb(breadcrumb.url, outputChannel);
    });
}

async function validateIfBreadcrumbsCanBeAutoGenerated(document: vscode.TextDocument, outputChannel: vscode.OutputChannel) {
    const relativeUri = vscode.workspace.asRelativePath(document.uri);
    if (relativeUri === document.uri.toString()) {
        outputChannel.appendLine(`Document is not in workspace: ${document.uri.toString()}`);
        return;
    }

    const sections = relativeUri.split('/');
    const breadcrumbs = [];
    // The last folder can be ignored
    for (let i = 0; i < sections.length - 1; i++) {
        const subsections = sections.slice(0, i + 1);
        const relativeUri = subsections.join('/');
        if (await doesFileExistInWorkspace(relativeUri)) {
            breadcrumbs.push({
                url: `/${relativeUri}`,
                title: subsections[subsections.length - 1]
            });
        } else {
            outputChannel.appendLine(`Section cannot automatically be added as breadcrumb: ${relativeUri}`);
        }
    }

    outputChannel.appendLine(`Breadcrumbs that can be automatically added:`);
    outputChannel.appendLine(YAML.stringify({
        breadcrumbs: breadcrumbs
    }));
}

async function validateBreadcrumb(uri: string, outputChannel: vscode.OutputChannel) {
    if (!uri.startsWith('/')) {
        outputChannel.appendLine(`Invalid breadcrumb url: ${uri}`);
        return;
    }

    const relativeUri = uri.slice(1);

    if (!await doesFileExistInWorkspace(relativeUri)) {
        outputChannel.appendLine(`Breadcrumb not found: ${uri}`);
    }
}

async function doesFileExistInWorkspace(uri: string): Promise<boolean> {
    const workspaceRootUri = getWorkspaceRootUri();
    // Breadcrumbs rely on 'index.md' files, but the filename is stripped from the url
    const breadcrumbUri = vscode.Uri.joinPath(workspaceRootUri, uri, 'index.md');

    try {
        await vscode.workspace.fs.stat(breadcrumbUri);
        return true;
    } catch(error) {
        return false;
    }
}
